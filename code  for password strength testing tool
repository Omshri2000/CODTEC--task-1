import re

# Set of common passwords to check against
COMMON_PASSWORDS = {"123456", "password", "qwerty", "abc123", "letmein", "welcome", "admin"}

def check_length(password):
    """
    Checks if the password is at least 8 characters long.
    
    Args:
        password (str): The password to check.
        
    Returns:
        bool: True if the password length is 8 or more characters, otherwise False.
    """
    # The password must have at least 8 characters
    return len(password) >= 8

def check_complexity(password):
    """
    Checks if the password has uppercase, lowercase, numbers, and special characters.
    
    Args:
        password (str): The password to check.
        
    Returns:
        tuple: A tuple of booleans indicating whether the password contains:
               - uppercase letters
               - lowercase letters
               - digits
               - special characters
    """
    # Use regular expressions to check for specific character types in the password
    has_upper = bool(re.search(r'[A-Z]', password))  # Check for uppercase letters
    has_lower = bool(re.search(r'[a-z]', password))  # Check for lowercase letters
    has_digit = bool(re.search(r'\d', password))     # Check for digits
    has_special = bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password))  # Check for special characters
    
    # Return a tuple of results indicating which character types are present
    return has_upper, has_lower, has_digit, has_special

def check_uniqueness(password):
    """
    Checks if the password is too common by comparing it against a set of known common passwords.
    
    Args:
        password (str): The password to check.
        
    Returns:
        bool: True if the password is not in the set of common passwords, otherwise False.
    """
    # Convert password to lowercase and check if it matches any in the common passwords set
    return password.lower() not in COMMON_PASSWORDS

def assess_password_strength(password):
    """
    Assesses the strength of the password based on its length, complexity, and uniqueness.
    
    Args:
        password (str): The password to evaluate.
        
    Returns:
        str: A message describing the password's strength along with suggestions for improvement.
    """
    score = 0  # Initialize the score to evaluate password strength
    feedback = []  # List to hold feedback messages for the user

    # Evaluate the length of the password
    if check_length(password):
        score += 1  # Add a point if password is at least 8 characters long
    else:
        feedback.append("Password should be at least 8 characters long.")
    
    # Evaluate the complexity of the password (uppercase, lowercase, digits, special characters)
    has_upper, has_lower, has_digit, has_special = check_complexity(password)
    complexity_score = sum([has_upper, has_lower, has_digit, has_special])  # Count how many complexity requirements are met
    
    # If the password meets at least 3 out of the 4 complexity requirements, add 2 points
    if complexity_score >= 3:
        score += 2
    else:
        feedback.append("Password should contain a mix of uppercase, lowercase, numbers, and special characters.")
    
    # Check if the password is unique and not too common
    if check_uniqueness(password):
        score += 2  # Add 2 points if the password is unique (not in the common passwords set)
    else:
        feedback.append("Password is too common. Try something unique.")
    
    # Assess the final password strength based on the total score
    if score >= 5:
        feedback.insert(0, "Password Strength: Strong")  # High score indicates strong password
    elif score >= 3:
        feedback.insert(0, "Password Strength: Medium")  # Moderate score indicates medium strength
    else:
        feedback.insert(0, "Password Strength: Weak")  # Low score indicates weak password
    
    # Return the feedback messages, joined into a single string
    return "\n".join(feedback)
